
["SHmmo TesT Program", "Test Site: 0", "AdjusTESTRange:Fasle", "ResultMode is Results", "CurrentPatternName:test_program_name1", "PatternCycleCount:11111", "Current_V_Spec:VDDCX=0.1V", 
"Current_T_Spec:ATPG_Shift_100MHz", "VcoefLL_ADJ:0.6V", "ATPG_Shift_700MHZ", "CurrentPatternName:test_program_name1",
'100.00\t.\t.\t.\t.\t',
'95.00\t.\t.\t.\t.\t',
'90.00\t.\t.\t.\t.\t',
'85.00\t.\t.\t.\t.\t',
'80.00\t.\t.\t.\t.\t',
'75.00\t.\t.\t.\t.\t',
'70.00\t.\t.\t.\t.\t',
'65.00\t.\t.\t.\t.\t',
'60.00\t.\t.\t.\t.\t',
'55.00\t.\t.\t.\t.\t',
'50.00\t.\t.\t.\t.\t',
'45.00\t.\t.\t.\t.\t',
'40.00\t.\t.\t.\t.\t',
'35.00\t.\t.\t.\t.\t',
'30.00\t.\t.\t.\t.\t',
'X-Aixs\t0.60\t0.61\t0.62\t0.63\t0.64\t0.65\t0.66\t0.67\t0.68\t0.69\t:VDDCX (v)'
]
import pandas as pd 
import numpy as np 
import holoviews as hv 
import hvplot.pandas 
from holoviews import opts
from bokeh.models import Select 
from bokeh.models import ColumnDataSource
import panel as pn 
import os 
import glob

def filter_csv_rows(file_path):
    """
    read a csv file and filters out specified rows

    Parameters
    ----------
    file_path : TYPE
        DESCRIPTION.

    Returns
    -------
    None.

    """
    try: 
        df = pd.read_csv(file_path, header=72)
        print(df.columns)
        # drop rows 76 to 80 (which now indexed 0 to 4 after reading)
        rows_to_drop = [i for i in range(5)]
        
        df_filtered = df.drop(rows_to_drop, axis=0).reset_index(drop=True)
        
        return df_filtered
    except FileNotFoundError:
        print("file not found")
    
    except Exception as e:
        print(e)
        return None


def create_scatter_plot(stdf_item, wafer_list, df_limit):
    df_filter = df[df["LOT_WAFER"].isin(wafer_list)]
    df_filter = df_filter[[stdf_item, "LOT_ID", "WAFER_ID", "LOT_WAFER",  "DIE_X", "DIE_Y"]]
    df_filter = df_filter.sort_values(by=stdf_item)
    df_filter["cdf"] = np.arange(1, len(df_filter[stdf_item]) + 1) / len(df_filter[stdf_item]) * 100
    
    scatter = df_filter.hvplot.scatter(
        x = stdf_item,
        y = 'cdf',
        c='LOT_WAFER',
        title=stdf_item,
        legend='top_left',
        width=500,
        height=400,
        ).opts(opts.Scatter(show_legend=True))
    
    heatmap = hv.HeatMap(
            df_filter, 
            kdims=["DIE_X", "DIE_Y"],
            vdims=[stdf_item]
        ).opts(
            title="Heat Map {}".format(stdf_item),
            width=450, 
            height=400,
            cmap="viridis",
            invert_yaxis=True,
            colorbar=True
    )
    
    
    
    df_limit_filter = df_limit[df_limit['stdf_item']==stdf_item]
    # df_limit_filter = df_limit[df_limit['Parameter']==stdf_item]
    
    HighL = df_limit_filter["HighL"].unique().tolist()[0]
    LowL = df_limit_filter["LowL"].unique().tolist()[0]
    
    
    vline_low = hv.VLine(x=LowL).opts(color='red', line_width=3)
    vline_high = hv.VLine(x=HighL).opts(color='red', line_width=3)
    
    return (scatter * vline_high * vline_low) + heatmap


# df = pd.read_csv(r"D:\PERSONAL_SPACE\general\NPI\Neutron 2.0 UXNN\UXNN_TSE\pivot_data_stdf.csv", index_col=False)
df_limit = pd.read_csv(r"D:\PERSONAL_SPACE\general\NPI\Neutron 2.0 UXNN\Neutron_PGM_Review\limit.csv")

# filter all the non
df_limit = df_limit.dropna()

# get the paramater data list 
param_list = df_limit["stdf_item"].unique().tolist()

filter_column = ["Parameter"," SBIN","HBIN","DIE_X","DIE_Y","SITE","TIME","TOTAL_TESTS","LOT_ID","WAFER_ID", "LOT_WAFER"] + sorted(param_list)


# df = pd.DataFrame()
# for file_name in os.listdir(r"D:\PERSONAL_SPACE\general\NPI\Neutron 2.0 UXNN\UXNN_MP\SPK91"):
#     file_path = os.path.join(r"D:\PERSONAL_SPACE\general\NPI\Neutron 2.0 UXNN\UXNN_MP\SPK91", file_name)
#     df_tmp = filter_csv_rows(file_path=file_path)
#     df = pd.concat([df,df_tmp],axis=0)

# # path = r"D:\PERSONAL_SPACE\general\NPI\Neutron 2.0 UXNN\UXNN_MP\SPK91\ASE_ASEK-S_CD90-42823-22B_WSBU-42823-22B-02_TPP_SPK91-SPK91-01_2023-12-19T032959_0_WS1_349AIVT1_UFLEX222.stdf.gextb.csv"
# # df = filter_csv_rows(file_path=path)

# df["LOT_WAFER"] = df["LOT_ID"].astype(str) + "-" + df["WAFER_ID"].astype(str)
# wafer_list = df["LOT_WAFER"].unique().tolist()

# # print(df.columns)
# df = df[filter_column]

df = pd.read_csv(r"D:\PERSONAL_SPACE\general\NPI\Neutron 2.0 UXNN\UXNN_MP\STDF_Data.csv")
wafer_list = df["LOT_WAFER"].unique().tolist()
#

# convert the object to numerical for columns 
for param in param_list:
    if df[param].dtype == "object":
        try:
            df[param] = pd.to_numeric(df[param], errors="coerce")
        except ValueError:
            pass

# print(df.dtypes)
# print(df.dtypes)
# df.to_csv(r"D:\PERSONAL_SPACE\general\NPI\Neutron 2.0 UXNN\UXNN_MP\STDF_Data.csv")

pn.extension()


select = pn.widgets.Select(title="Select STDF ITEM: ", options=sorted(param_list), size=20, width=500)
multi_select = pn.widgets.MultiSelect(name='Lot Wafer', value=wafer_list, options=wafer_list, size=8)

# @pn.bind(select.param.value)
# def update_plot(stdf_item):
#     return create_scatter_plot(stdf_item)

# app = pn.Column(select, update_plot)

# app.servable()

interactive_plot = pn.bind(create_scatter_plot, select, multi_select, df_limit)

pn.Row(
        pn.Column(pn.WidgetBox(select),pn.WidgetBox(multi_select)),       
        interactive_plot
        ).servable()
