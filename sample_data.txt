
["SHmmo TesT Program", "Test Site: 0", "AdjusTESTRange:Fasle", "ResultMode is Results", "CurrentPatternName:test_program_name1", "PatternCycleCount:11111", "Current_V_Spec:VDDCX=0.1V", 
"Current_T_Spec:ATPG_Shift_100MHz", "VcoefLL_ADJ:0.6V", "ATPG_Shift_700MHZ", "CurrentPatternName:test_program_name1",
'100.00\t.\t.\t.\t.\t',
'95.00\t.\t.\t.\t.\t',
'90.00\t.\t.\t.\t.\t',
'85.00\t.\t.\t.\t.\t',
'80.00\t.\t.\t.\t.\t',
'75.00\t.\t.\t.\t.\t',
'70.00\t.\t.\t.\t.\t',
'65.00\t.\t.\t.\t.\t',
'60.00\t.\t.\t.\t.\t',
'55.00\t.\t.\t.\t.\t',
'50.00\t.\t.\t.\t.\t',
'45.00\t.\t.\t.\t.\t',
'40.00\t.\t.\t.\t.\t',
'35.00\t.\t.\t.\t.\t',
'30.00\t.\t.\t.\t.\t',
'X-Aixs\t0.60\t0.61\t0.62\t0.63\t0.64\t0.65\t0.66\t0.67\t0.68\t0.69\t:VDDCX (v)'
]
import pandas as pd 
import numpy as np 
import holoviews as hv 
import hvplot.pandas 
from holoviews import opts
from bokeh.models import Select 
from bokeh.models import ColumnDataSource
import panel as pn 
import os 
import glob

# -*- coding: utf-8 -*-
"""
Created on Wed Dec 20 22:03:20 2023

@author: jqiu2428
"""

# -*- coding: utf-8 -*-
"""
Created on Sat Nov 18 19:43:18 2023

@author: jqiu2428
"""
import pandas as pd 
import numpy as np 
import holoviews as hv 
import hvplot.pandas 
from holoviews import opts
from bokeh.models import Select 
from bokeh.models import ColumnDataSource
import panel as pn 
import os 
import glob

def filter_csv_rows(file_path):
    """
    read a csv file and filters out specified rows

    Parameters
    ----------
    file_path : TYPE
        DESCRIPTION.

    Returns
    -------
    None.

    """
    try: 
        df = pd.read_csv(file_path, header=72)
        print(df.columns)
        # drop rows 76 to 80 (which now indexed 0 to 4 after reading)
        rows_to_drop = [i for i in range(5)]
        
        df_filtered = df.drop(rows_to_drop, axis=0).reset_index(drop=True)
        
        return df_filtered
    except FileNotFoundError:
        print("file not found")
    
    except Exception as e:
        print(e)
        return None


def update_slider_range(stdf_item, wafer_list):
    
    df_filter = df[df["LOT_WAFER"].isin(wafer_list)]
    df_filter = df_filter[[stdf_item, "LOT_ID", "WAFER_ID", "LOT_WAFER",  "DIE_X", "DIE_Y"]]
    min_val = df_filter[stdf_item].min()
    max_val = df_filter[stdf_item].max()
    color_range_slider.start = min_val
    color_range_slider.end = max_val
    color_range_slider.value = (min_val, max_val)



def create_scatter_plot(stdf_item, wafer_list, df_limit, color_range):
    df_filter = df[df["LOT_WAFER"].isin(wafer_list)]
    df_filter = df_filter[[stdf_item, "LOT_ID", "WAFER_ID", "LOT_WAFER",  "DIE_X", "DIE_Y"]]
    df_filter = df_filter.sort_values(by=stdf_item)
    df_filter["cdf"] = np.arange(1, len(df_filter[stdf_item]) + 1) / len(df_filter[stdf_item]) * 100
    
    df_limit_filter = df_limit[df_limit['stdf_item']==stdf_item]
    # df_limit_filter = df_limit[df_limit['Parameter']==stdf_item]
    
    HighL = df_limit_filter["HighL"].unique().tolist()[0]
    LowL = df_limit_filter["LowL"].unique().tolist()[0]
    
    print(color_range)
    
    scatter = df_filter.hvplot.scatter(
        x = stdf_item,
        y = 'cdf',
        c='LOT_WAFER',
        title=stdf_item,
        legend='top_left',
        width=500,
        height=400,
        ).opts(opts.Scatter(show_legend=True))
    
    heatmap = hv.HeatMap(
            df_filter, 
            kdims=["DIE_X", "DIE_Y"],
            vdims=[stdf_item]
        ).opts(
            title="Heat Map {}".format(stdf_item),
            width=450, 
            height=400,
            cmap="RdYlGn",
            invert_yaxis=True,
            colorbar=True, 
            clim = color_range
    )
    
    
    

    
    
    vline_low = hv.VLine(x=LowL).opts(color='red', line_width=3)
    vline_high = hv.VLine(x=HighL).opts(color='red', line_width=3)
    
    return (scatter * vline_high * vline_low) + heatmap
