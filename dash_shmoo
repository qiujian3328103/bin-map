import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, ClientsideFunction

import numpy as np
import pandas as pd
import datetime
from datetime import datetime as dt
import pathlib
import plotly.graph_objects as go
from test_shmoo_plot import create_shmoo_plot
app = dash.Dash(
    __name__,
    meta_tags=[{"name": "viewport", "content": "width=device-width, initial-scale=1"}],
)
app.title = "Shmoo Analytics Dashboard"

server = app.server
app.config.suppress_callback_exceptions = True

# Path
BASE_PATH = pathlib.Path(__file__).parent.resolve()
DATA_PATH = BASE_PATH.joinpath("data").resolve()

# # Read data
df = pd.read_csv(DATA_PATH.joinpath("clinical_analytics.csv.gz"))

clinic_list = df["Clinic Name"].unique()
# df["Admit Source"] = df["Admit Source"].fillna("Not Identified")
admit_list = df["Admit Source"].unique().tolist()


data =  [[.1, .3, .5, .7, .9],
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]]




test_data = {
    
    "test_program_1":[
    ["100", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["90", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["80", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["70", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["60", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["50", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["40", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["30", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["20", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["10", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["0", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["ATPG", "0", "5", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60", "65", "70", "75","80", "85","90", "95","100"]],

    "test_program_2": [
    ["100", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["90", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["80", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["70", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["60", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["50", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["40", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["30", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["20", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["10", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["0", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["ATPG", "0", "5", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60", "65", "70", "75","80", "85","90", "95","100"]],

    "test_program_3": [
    ["100", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["90", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["80", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["70", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["60", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["50", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["40", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["30", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["20", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["10", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["0", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["ATPG", "0", "5", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60", "65", "70", "75","80", "85","90", "95","100"]],

    "test_program_4": [
    ["100", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["90", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["80", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["70", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["60", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["50", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["40", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["30", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["20", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["10", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["0", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["ATPG", "0", "5", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60", "65", "70", "75","80", "85","90", "95","100"]],
}



shmoo_data = [
    ["100", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["90", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["80", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["70", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["60", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["50", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P","P", "P","P", "P", "P"],
    ["40", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["30", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["20", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["10", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["0", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F", "F","F", "F","F", "F", "P"],
    ["ATPG", "0", "5", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60", "65", "70", "75","80", "85","90", "95","100"]
]



# fig = create_shmoo_plot(shmoo_data=shmoo_data)
# fig.show()


def description_card():
    """

    :return: A Div containing dashboard title & descriptions.
    """
    return html.Div(
        id="description-card",
        children=[
            html.H5("Shmoo Reader"),
            html.H3("Welcome to the Shmoo Reader Dashboard"),
            html.Div(
                id="intro",
                children="Explore different Shmoo Files to Visulize and Generate Shmoo Plot",
            ),
        ],
    )


def generate_control_card():
    """

    :return: A Div containing controls for graphs.
    """
    return html.Div(
        id="control-card",
        children=[
            html.P("Select Product"),
            dcc.Dropdown(
                id="product-select",
                options=[{"label": i, "value": i} for i in ["Waikiki", "Hamilton", "Magnus"]],
                value="Waikiki",
            ),
            html.Br(),
            html.P("Select Shmoo Test Type"),
            dcc.Dropdown(
                id="admit-select",
                options=[{"label": i, "value": i} for i in ["TDF", "ATPG", "MBIST"]],
                value="TDF",
                multi=True,
            ),
            html.Br(),
            dcc.Dropdown(
                id="filetype-select",
                options=[{"label": i, "value": i} for i in ["Multiple Files", "Multiple Folder"]],
                value="Multiple Files",
            ),
            html.Br(),
            html.P("Upload CSV"),
            dcc.Upload(
                id="upload-data",
                children=html.Div(["Drag and drop or click to select a file to upload."]),
            style={
                "width": "100%",
                "height": "80px",
                "lineHeight": "60px",
                "borderWidth": "1px",
                "borderStyle": "dashed",
                "borderRadius": "5px",
                "textAlign": "center",
                "margin": "10px",
            },
            multiple=True,
                ),
            html.Br(),
            html.Div(
                id="reset-btn-outer",
                children=[
                    html.Button(id="analyze-btn", children="Analyze File", n_clicks=0),
                    html.Button(id="download-btn", children="Download", n_clicks=0),
                    html.Button(id="reset-btn", children="Reset", n_clicks=0),
                ],
                style={"display": "flex", "justify-content": "space-between"},
            ),
        ],
    )


app.layout = html.Div(
    id="app-container",
    children=[
        # Banner
        html.Div(
            id="banner",
            className="banner",
            children=[html.Img(src=app.get_asset_url("plotly_logo.png"))],
        ),
        # Left column
        html.Div(
            id="left-column",
            className="three columns",
            children=[description_card(), generate_control_card()]
            + [
                html.Div(
                    ["initial child"], id="output-clientside", style={"display": "none"}
                )
            ],
        ),
        # Right column
        html.Div(
            id="right-column",
            className="nine columns",
            children=[
                # Patient Volume Heatmap
                html.Div(
                    id="shmoo_plot_card",
                    children=[
                        html.B("Shmoo Plot"),
                        html.Hr(),
                        dcc.Graph(id="patient_volume_hm"),
                    ],
                ),
                # Patient Wait time by Department
                html.Div(
                    id="wait_time_card",
                    children=[
                        html.B("Shmoo Plot Setting"),
                        html.Hr(),
                        # html.Div(id="wait_time_table", children=initialize_table()),
                        html.Div(
                            id="plot_setting_card",
                            children=[
                                html.P("Select Plot Test Program: "),
                                dcc.Dropdown(
                                    id="test-program-select",
                                    options=[{"label": i, "value": i} for i in ["TestProgram1"]],
                                    value="TestProgram1"),
                                # html.Button(id="plot-btn", children="Plot Data", n_clicks=0),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    ],
)


@app.callback(
    Output("test-program-select", "options"),
    Output("test-program-select", "value"),
    [Input("analyze-btn", "n_clicks")]
)
def update_test_program_options(n_clicks):
    if n_clicks:
        test_data_keys = list(test_data.keys())
        print(test_data_keys)
        options = [{"label": key, "value": key} for key in test_data_keys]
        value = test_data_keys[0] if test_data_keys else None
        return options, value
    return [], None


@app.callback(
    Output("patient_volume_hm", "figure"),
    [Input("test-program-select", "value")]
)
def update_selected_test_program(value):
    if value:
        selected_test_data = test_data.get(value)
        fig = create_shmoo_plot(shmoo_data=selected_test_data)
    else:
        fig = go.Figure()

    return fig

# @app.callback(
#     Output("patient_volume_hm", "figure"),
#     [Input("analyze-btn", "n_clicks")],
#     allow_duplicate=True
# )
# def generate_heatmap(n_clicks):
#     if n_clicks:
#         # Generate heatmap data
#         data = [[0.1, 0.3, 0.5, 0.7, 0.9],
#                 [1, 0.8, 0.6, 0.4, 0.2],
#                 [0.2, 0, 0.5, 0.7, 0.9],
#                 [0.9, 0.8, 0.4, 0.2, 0],
#                 [0.3, 0.4, 0.5, 0.7, 1]]

#         # fig = go.Figure(data=go.Heatmap(z=data))
#         # fig.update_layout(title="Shmoo Heatmap")
#         fig = create_shmoo_plot(shmoo_data=shmoo_data)

#         return fig

#     # Return an empty figure if the button has not been clicked
#     return go.Figure()


# @app.callback(
#     Output("patient_volume_hm", "figure"),
#     [Input("reset-btn", "n_clicks")],
#     allow_duplicate=True
# )
# def reset_plots(reset_clicks):
#     if reset_clicks:
#         # Return an empty figure to clear the plot
#         return go.Figure()

#     # Return the current figure if the button has not been clicked
#     return dash.no_update

# Run the server
if __name__ == "__main__":
    app.run_server(debug=True)
